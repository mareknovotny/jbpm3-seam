<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <servlet>
    <description>Enable the JSF servlet. See faces-config.xml for Faces-specific configuration.</description>
      <servlet-name>Faces Servlet</servlet-name>
      <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
      <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- Mapping for all plain pages. -->
  <servlet-mapping>
      <servlet-name>Faces Servlet</servlet-name>
      <url-pattern>*.jsf</url-pattern>
  </servlet-mapping>

  <!-- This mapping is for the process images. -->
  <servlet-mapping>
      <servlet-name>Faces Servlet</servlet-name>
      <url-pattern>/app/pi/*</url-pattern>
  </servlet-mapping>

  <context-param>
      <description> Use Documents Saved as *.xhtml </description>
      <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
      <param-value>.xhtml</param-value>
  </context-param>

  <context-param>
      <description> Facelets debug output </description>
      <param-name>facelets.DEVELOPMENT</param-name>
      <param-value>false</param-value>
  </context-param>

  <!-- A simple JSP to redirect to the basic search page. -->
  <welcome-file-list>
      <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!--
     This role list should be changed to include all the relevant roles for your
     environment.
  -->
  <security-role>
      <role-name>admin</role-name>
  </security-role>
  <security-role>
      <role-name>user</role-name>
  </security-role>

  <!--
    Security constraints - optionally customize the role name to require a login
    before access is allowed. Also, be sure to edit jboss-web.xml to configure
    the security domain if you are deploying inside JBoss AS.
  -->
  <security-constraint>
      <web-resource-collection>
          <web-resource-name>Secure Area</web-resource-name>
          <url-pattern>/app/*</url-pattern>
      </web-resource-collection>
      <auth-constraint>
          <role-name>user</role-name>
      </auth-constraint>
  </security-constraint>

  <!-- Example Login page - lists sample users -->
  <login-config>
      <auth-method>FORM</auth-method>
      <form-login-config>
          <form-login-page>/login.jsp</form-login-page>
          <form-error-page>/login.jsp?error=1</form-error-page>
      </form-login-config>
  </login-config>

  <!-- Login configuration option #1 - use the login page ==>
  <login-config>
      <auth-method>FORM</auth-method>
      <form-login-config>
          <form-login-page>/ua/login.jsf</form-login-page>
          <form-error-page>/ua/login.jsf?error=true</form-error-page>
      </form-login-config>
  </login-config>
  <!== Login configuration option #1 -->

  <!-- Login configuration option #2 - use basic auth ==>
  <login-config>
      <auth-method>BASIC</auth-method>
      <realm-name>jBPM Administration Console</realm-name>
  </login-config>
  <!== Login configuration option #2 -->

  <!-- Job executor launcher ==>
  <listener>
    <description>
      Starts the job executor on initialization and stops it on destruction.
    </description>
    <listener-class>org.jbpm.web.JobExecutorLauncher</listener-class>
  </listener>
  <!== Job executor launcher -->

  <!-- listener>
    <description>
   <description>Closes the jBPM configuration on destruction, releasing resources.
      This listener should appear after the job executor launcher,
      to avoid reopening the configuration.</description>
    <listener-class>org.jbpm.web.JbpmConfigurationCloser</listener-class>
  </listener -->

  <!--
  <resource-ref>
    <description>Logical name of the data source that provides connections to the persistence service.
      Must match the hibernate.connection.datasource property in the Hibernate
      configuration file.</description>
    <res-ref-name>jdbc/JbpmDataSource</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  -->

  <!--
  <resource-ref>
    <description>Logical name of the factory that provides JMS connections to the message service.
      Required for processes that contain asynchronous continuations.</description>
    <res-ref-name>jms/JbpmConnectionFactory</res-ref-name>
    <res-type>javax.jms.ConnectionFactory</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  -->

  <!--
  <ejb-local-ref>
    <description>Link to the local entity bean that implements the scheduler service.
      Required for processes that contain timers.</description>
    <ejb-ref-name>ejb/TimerEntityBean</ejb-ref-name>
    <ejb-ref-type>Entity</ejb-ref-type>
    <local-home>org.jbpm.ejb.LocalTimerEntityHome</local-home>
    <local>org.jbpm.ejb.LocalTimerEntity</local>
  </ejb-local-ref>
  -->

  <!--
  <message-destination-ref>
    <description>The message service sends job messages to the queue referenced here. To ensure
      this is the same queue from which the JobListenerBean receives messages, the
      message-destination-link element points to a common logical destination, JobQueue.</description>
    <message-destination-ref-name>jms/JobQueue</message-destination-ref-name>
    <message-destination-type>javax.jms.Queue</message-destination-type>
    <message-destination-usage>Produces</message-destination-usage>
    <message-destination-link>JobQueue</message-destination-link>
  </message-destination-ref>
  -->

</web-app>
