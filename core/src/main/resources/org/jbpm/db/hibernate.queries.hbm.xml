<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

  <!-- related to ProcessDefintion -->
  <!-- ########################### -->

  <query name="GraphSession.AllProcessNames">
    <![CDATA[
     select distinct pd.name
     from org.jbpm.graph.def.ProcessDefinition pd
    ]]>
  </query>

  <query name="GraphSession.NumberOfDeployedProcesses">
    <![CDATA[
     select count (distinct pd.name)
     from org.jbpm.graph.def.ProcessDefinition pd
    ]]>
  </query>

  <query name="GraphSession.NumberOfActiveProcessInstances">
    <![CDATA[
     select count (pi.id)
     from org.jbpm.graph.exe.ProcessInstance pi
     where pi.end is null
    ]]>
  </query>

  <query name="GraphSession.findLatestProcessDefinitionQuery">
    <![CDATA[
     select pd
     from org.jbpm.graph.def.ProcessDefinition pd
     where pd.name = :name
     order by pd.version desc
    ]]>
  </query>

  <query name="GraphSession.findProcessDefinitionByNameAndVersion">
    <![CDATA[
      select pd
      from org.jbpm.graph.def.ProcessDefinition pd
      where pd.name = :name
        and pd.version = :version
    ]]>
  </query>

  <query name="GraphSession.findAllProcessDefinitions">
    <![CDATA[
      select pd
      from org.jbpm.graph.def.ProcessDefinition pd
      order by pd.name, pd.version desc
    ]]>
  </query>

  <query name="GraphSession.findAllProcessDefinitionVersions">
    <![CDATA[
      select pd
      from org.jbpm.graph.def.ProcessDefinition pd
      where pd.name = :name
      order by pd.version desc
    ]]>
  </query>

  <query name="GraphSession.findLatestProcessDefinitions">
    <![CDATA[
      select pd.name, max(pd.version)
      from org.jbpm.graph.def.ProcessDefinition pd
      group by pd.name
    ]]>
    <!-- better alternative, if all databases supported ansi sql tuple syntax
      select pd
      from org.jbpm.graph.def.ProcessDefinition pd
      where (pd.name, pd.version) in (
        select pd.name, max(pd.version)
        from org.jbpm.graph.def.ProcessDefinition pd
        group by pd.name
      )
     -->
  </query>

  <query name="GraphSession.findAllProcessInstancesForDefinition">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.processDefinition.id = :processDefinitionId
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findReferencingProcessStates">
    <![CDATA[
      select ps
      from org.jbpm.graph.node.ProcessState ps
      where ps.subProcessDefinition = :subProcessDefinition
    ]]>
  </query>

  <!-- related to ProcessInstance -->
  <!-- ########################## -->

  <query name="GraphSession.findAllRunningProcessInstancesWithProcessName">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.processDefinition.name = :processDefinitionName
        and pi.end is null
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findAllProcessInstancesWithProcessName">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.processDefinition.name = :processDefinitionName
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findAllRunningProcessInstances">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.end is null
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findAllProcessInstances">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findSubProcessInstances">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.superProcessToken is not null
      and pi.superProcessToken.processInstance = :processInstance
      order by pi.start desc
    ]]>
  </query>

  <query name="GraphSession.findTokensForProcessInNode">
    <![CDATA[
      select token
      from org.jbpm.graph.exe.Token token
      where token.processInstance.processDefinition.name = :processDefinitionName
      and token.node.name = :nodeName
    ]]>
  </query>

  <query name="GraphSession.findTokensForProcessVersionInNode">
    <![CDATA[
      select token
      from org.jbpm.graph.exe.Token token
      where token.processInstance.processDefinition.name = :processDefinitionName
      and token.processInstance.processDefinition.version = :processDefinitionVersion
      and token.node.name = :nodeName
    ]]>
  </query>

  <query name="GraphSession.findProcessInstanceByKey">
    <![CDATA[
      select pi
      from org.jbpm.graph.exe.ProcessInstance pi
      where pi.processDefinition = :processDefinition
      and pi.key = :key
    ]]>
  </query>

  <query name="GraphSession.findLogsForProcessInstance">
    <![CDATA[
      select pl
      from org.jbpm.logging.log.ProcessLog pl
      where pl.token.processInstance = :processInstance
    ]]>
  </query>

  <query name="GraphSession.findTaskInstancesForProcessInstance">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.processInstance = :processInstance
    ]]>
  </query>

  <query name="GraphSession.deleteJobsForProcessInstance">
    <![CDATA[
      delete from org.jbpm.job.Job job
      where job.processInstance = :processInstance
    ]]>
  </query>

  <query name="GraphSession.calculateAverageTimeByNode">
    <![CDATA[
      select
        nl.node.id,
        nl.node.name,
        count(nl.leave),
        avg(nl.duration),
        min(nl.duration),
        max(nl.duration)
      from org.jbpm.graph.log.NodeLog nl
      where nl.node.processDefinition.id = :processDefinitionId
      and nl.duration > :minimumDuration
      group by nl.node.id, nl.node.name
      order by avg(nl.duration) desc
    ]]>
  </query>

  <query name="GraphSession.findActiveNodesByProcessInstance">
    <![CDATA[
      select node
      from org.jbpm.graph.exe.Token token
      join token.node node
      where token.processInstance = :processInstance
        and token.isSuspended = false
        and token.parent is not null
        and token.end is null
    ]]>
  </query>

  <query name="GraphSession.findAllSwimlaneNames">
    <![CDATA[
      select distinct swimlane.name
      from org.jbpm.taskmgmt.def.Swimlane swimlane
    ]]>
  </query>

  <!-- Logging                     -->
  <!-- ########################### -->

  <query name="LoggingSession.findLogsByToken">
    <![CDATA[
      select pl
      from org.jbpm.logging.log.ProcessLog pl
      where pl.token = :token
      order by pl.index
    ]]>
  </query>

  <!-- JobSession                  -->
  <!-- ########################### -->

  <query name="JobSession.getFirstAcquirableJob">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where (job.lockOwner is null or job.lockOwner = :lockOwner)
      and job.retries > 0
      and job.dueDate <= :now
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.getFirstUnownedAcquirableJob">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where job.lockOwner is null
      and job.retries > 0
      and job.dueDate <= :now
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.findExclusiveJobs">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where (job.lockOwner is null or job.lockOwner = :lockOwner)
      and job.retries > 0
      and job.dueDate <= :now
      and job.processInstance = :processInstance
      and job.isExclusive = true
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.getFirstDueJob">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where (job.lockOwner is null or job.lockOwner = :lockOwner)
      and job.retries > 0
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.getFirstDueJobExcludingMonitoredJobs">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where (job.lockOwner is null or job.lockOwner = :lockOwner)
      and job.id not in (:monitoredJobIds)
      and job.retries > 0
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.getFirstUnownedDueJob">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where job.lockOwner is null
      and job.retries > 0
      and job.isSuspended = false
      order by job.dueDate asc
    ]]>
  </query>

  <query name="JobSession.suspendJobs">
    <![CDATA[
      update org.jbpm.job.Job job
      set job.isSuspended = true
      where job.token = :token
    ]]>
  </query>

  <query name="JobSession.resumeJobs">
    <![CDATA[
      update org.jbpm.job.Job job
      set job.isSuspended = false
      where job.token = :token
    ]]>
  </query>

  <query name="JobSession.deleteTimersByName">
    <![CDATA[
      delete from org.jbpm.job.Timer timer
      where timer.token = :token
        and timer.name = :name
        and timer.lockOwner is null
    ]]>
  </query>

  <query name="JobSession.findRepeatingTimersByName">
    <![CDATA[
      select timer
      from org.jbpm.job.Timer timer
      where timer.token = :token
        and timer.name = :name
        and timer.repeat is not null
    ]]>
  </query>

  <query name="JobSession.countDeletableJobsForProcessInstance">
    <![CDATA[
      select count(job.id)
      from org.jbpm.job.Job job
      where job.processInstance = :processInstance
        and job.lockOwner is null
        and type(job) in (org.jbpm.job.ExecuteNodeJob, org.jbpm.job.Timer)
    ]]>
  </query>

  <query name="JobSession.deleteJobsForProcessInstance">
    <![CDATA[
      delete from org.jbpm.job.Job job
      where job.processInstance = :processInstance
        and job.lockOwner is null
        and type(job) in (org.jbpm.job.ExecuteNodeJob, org.jbpm.job.Timer)
    ]]>
  </query>

  <query name="JobSession.findRepeatingTimersForProcessInstance">
    <![CDATA[
      select timer
      from org.jbpm.job.Timer timer
      where timer.processInstance = :processInstance
        and timer.repeat is not null
    ]]>
  </query>

  <query name="JobSession.findJobsByToken">
    <![CDATA[
      select job
      from org.jbpm.job.Job as job
      where job.token = :token
    ]]>
  </query>

  <query name="JobSession.findJobsWithOverdueLockTime">
    <![CDATA[
      select job
      from org.jbpm.job.Job job
      where job.lockTime < :threshold
    ]]>
  </query>

  <!-- related to Tasks            -->
  <!-- ########################### -->

  <query name="TaskMgmtSession.findTaskInstancesByActorId">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.actorId = :actorId
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findTaskInstancesByActorIds">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.actorId in (:actorIds)
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findPooledTaskInstancesByActorId">
    <![CDATA[
      select distinct ti.id
      from org.jbpm.taskmgmt.exe.TaskInstance ti
        join ti.pooledActors pooledActor
      where pooledActor.actorId = :actorId
        and ti.actorId is null
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findPooledTaskInstancesByActorIds">
    <![CDATA[
      select distinct ti.id
      from org.jbpm.taskmgmt.exe.TaskInstance ti
        join ti.pooledActors pooledActor
      where pooledActor.actorId in (:actorIds)
        and ti.actorId is null
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findTaskInstancesByTokenId">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.token.id = :tokenId
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findTaskInstancesByProcessInstance">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.token.processInstance = :processInstance
        and ti.isSuspended = false
        and ti.isOpen = true
    ]]>
  </query>

  <query name="TaskMgmtSession.findTaskInstancesByIds">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.id in (:taskInstanceIds)
    ]]>
  </query>

  <query name="TaskMgmtSession.findOpenTasksOfProcessInstance">
    <![CDATA[
      select ti
      from org.jbpm.taskmgmt.exe.TaskInstance ti
      where ti.token.processInstance = :instance
      and ti.end is null
    ]]>
  </query>

</hibernate-mapping>
